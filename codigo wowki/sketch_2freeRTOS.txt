#include <WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Configuración de MQTT
#define MQTT_CLIENT_ID "wokwi_sensor"
#define MQTT_BROKER "test.mosquitto.org"
#define MQTT_PORT 1883
#define MQTT_TOPIC "/smartcities/airquality"

// Coordenadas iniciales GPS
#define INITIAL_LAT 42.411567
#define INITIAL_LONG 13.397309
#define MOVE_AMOUNT 0.001

// Configuración de WiFi
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// Configuración de DHT22
#define DHTPIN 15
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// Configuración de sensores analógicos
#define PM25_PIN 34
#define PM10_PIN 35

// Configuración de pantalla OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Cliente MQTT
WiFiClient espClient;
PubSubClient client(espClient);

// Variables globales
float prev_lat = INITIAL_LAT;
float prev_long = INITIAL_LONG;
float humidity = 0;
float pm25 = 0;
float pm10 = 0;

// Declaración de tareas
void TaskWiFi(void* parameter);
void TaskMQTT(void* parameter);
void TaskSensors(void* parameter);
void TaskDisplay(void* parameter);

// Función para mapear valores de ADC
float mapADC(int raw, int minADC, int maxADC, float minVal, float maxVal) {
  return (float)(raw - minADC) * (maxVal - minVal) / (maxADC - minADC) + minVal;
}

// Función para obtener coordenadas aleatorias
void getCoordinates(float &lat, float &long_) {
  float variation_lat = ((float)random(-1000, 1000) / 1000000) * MOVE_AMOUNT;
  float variation_long = ((float)random(-1000, 1000) / 1000000) * MOVE_AMOUNT;
  lat += variation_lat;
  long_ += variation_long;
}

void setup() {
  Serial.begin(115200);
  randomSeed(analogRead(0));

  // Configuración inicial
  WiFi.begin(ssid, password);
  client.setServer(MQTT_BROKER, MQTT_PORT);

  // Inicializar DHT y pantalla OLED
  dht.begin();
  if (!oled.begin(0x3C, OLED_RESET)) {
    Serial.println("No se encontró pantalla OLED.");
    for (;;);
  }
  oled.clearDisplay();

  // Crear tareas de FreeRTOS
  xTaskCreatePinnedToCore(TaskWiFi, "WiFi Task", 2000, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(TaskMQTT, "MQTT Task", 3000, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(TaskSensors, "Sensor Task", 3000, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(TaskDisplay, "Display Task", 2000, NULL, 1, NULL, 1);
}

void loop() {
  // FreeRTOS gestiona las tareas; el loop puede quedar vacío.
}

// Tarea: Conexión WiFi
void TaskWiFi(void* parameter) {
  while (true) {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("Conectando a WiFi...");
      WiFi.begin(ssid, password);
      while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
      }
      Serial.println("\n¡Conexión WiFi establecida!");
      Serial.print("Dirección IP: ");
      Serial.println(WiFi.localIP());
    }
    vTaskDelay(pdMS_TO_TICKS(10000)); // Revisar conexión cada 10 segundos
  }
}

// Tarea: Publicación MQTT
void TaskMQTT(void* parameter) {
  while (true) {
    if (!client.connected()) {
      Serial.println("Conectando al servidor MQTT...");
      if (client.connect(MQTT_CLIENT_ID)) {
        Serial.println("¡Conectado a MQTT!");
      } else {
        Serial.println("Error al conectar a MQTT.");
        vTaskDelay(pdMS_TO_TICKS(5000)); // Reintentar en 5 segundos
        continue;
      }
    }

    // Crear mensaje JSON
    String message = "{\"sensorId\":\"" + String(MQTT_CLIENT_ID) + 
                     "\",\"latitude\":" + String(prev_lat, 6) +
                     ",\"longitude\":" + String(prev_long, 6) +
                     ",\"humidity\":" + String(humidity, 1) +
                     ",\"pm2_5\":" + String(pm25, 1) +
                     ",\"pm10\":" + String(pm10, 1) + "}";

    if (client.publish(MQTT_TOPIC, message.c_str())) {
      Serial.println("Mensaje publicado: " + message);
    } else {
      Serial.println("Error al publicar mensaje.");
    }

    vTaskDelay(pdMS_TO_TICKS(5000)); // Publicar cada 5 segundos
  }
}

// Tarea: Lectura de sensores
void TaskSensors(void* parameter) {
  while (true) {
    humidity = dht.readHumidity();
    int rawPM25 = analogRead(PM25_PIN);
    int rawPM10 = analogRead(PM10_PIN);
    pm25 = mapADC(rawPM25, 0, 4095, 0, 500);
    pm10 = mapADC(rawPM10, 0, 4095, 0, 500);

    getCoordinates(prev_lat, prev_long); // Actualizar coordenadas

    vTaskDelay(pdMS_TO_TICKS(2000)); // Leer sensores cada 2 segundos
  }
}

// Tarea: Actualización de pantalla OLED
void TaskDisplay(void* parameter) {
  while (true) {
    oled.clearDisplay();
    oled.setTextSize(1);
    oled.setTextColor(WHITE);
    oled.setCursor(0, 0);
    oled.print("Humedad: ");
    oled.print(humidity, 1);
    oled.println("%");
    oled.print("PM2.5: ");
    oled.print(pm25, 1);
    oled.println(" ug/m3");
    oled.print("PM10: ");
    oled.print(pm10, 1);
    oled.println(" ug/m3");
    oled.print("Lat: ");
    oled.println(prev_lat, 5);
    oled.print("Long: ");
    oled.println(prev_long, 5);
    oled.display();

    vTaskDelay(pdMS_TO_TICKS(500)); // Actualizar cada 0.5 segundos
  }
}

// mosquitto_sub -h test.mosquitto.org -p 1883 -t /smartcities/airquality